apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko
  namespace: "${infranamespaceprefix}tekton-pipelines"
  labels:
    app.kubernetes.io/version: "0.6"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64,linux/arm64,linux/ppc64le"
spec:
  description: >-
    This Task builds a simple Dockerfile with kaniko and pushes to a registry.
    This Task stores the image name and digest as results, allowing Tekton Chains to pick up
    that an image was built & sign it.
  params:
    - name: IMAGE
      description: Name (reference) of the image to build.
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
    - name: CONTEXT
      description: The build context used by Kaniko.
      default: ./
    - name: EXTRA_ARGS
      type: array
      default: []
    - name: BUILDER_IMAGE
      description: The image on which builds will run (default is v1.5.1)
      default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
  workspaces:
    - name: source
      description: Holds the context and Dockerfile
    - name: dockerconfig
      description: Includes a docker `config.json`
      optional: true
      mountPath: /kaniko/.docker
    - name: git-ssh
      description: Includes id_rsa and known_hosts
      optional: true
      mountPath: /notroot/.ssh
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.
  steps:
    - name: wait-for-sidecar
      image: docker.io/library/bash:5.1.4@sha256:c523c636b722339f41b6a431b44588ab2f762c5de5ec3bd7964420ff982fb1d9
      script: |
        #!/bin/sh
        set -eu

        i=0
        echo "WAITING FOR SIDECAR"
        until wget -qO- -o /dev/null "http://localhost:15021/healthz/ready"; do
          i=$((i+1))
          if [[ $i -eq 5 ]]; then
            break
          fi
          echo "WAITING FOR SIDECAR"
          sleep 3
        done
        if [[ $i -eq 5 ]]; then
          echo "SIDECAR UNAVAILABLE, RUNNING WITHOUT"
        else
          echo "SIDECAR AVAILABLE"
        fi

        echo "$i" > sidecar-check-counter
        exit 0
    - name: build
      workingDir: $(workspaces.source.path)
      image: $(params.BUILDER_IMAGE)
      script: |
        #!/bin/sh
        /kaniko/executor \
        --cache=true \
        --cache-dir=/kaniko/cache \
        --cache-repo="$(params.imageurl)/cache" \
        --dockerfile=$(params.DOCKERFILE) \
        --context=$(workspaces.source.path)/$(params.CONTEXT) \
        --destination="$(params.IMAGE):$$(cat VERSION)" \
        --digest-file=$(results.IMAGE_DIGEST.path) \
        --no-push=true
      # kaniko assumes it is running as root, which means this example fails on platforms
      # that default to run containers as random uid (like OpenShift). Adding this securityContext
      # makes it explicit that it needs to run as root.
      securityContext:
        runAsUser: 0
    - name: version
      workingDir: $(workspaces.source.path)
      image: 274295908850.dkr.ecr.eu-west-1.amazonaws.com/i/change/change:0.14.4-alpine3.16.3
      env:
      - name: PARAM_WORKSPACE_SOURCE_PATH
        value: $(workspaces.source.path)
      - name: GH_TOKEN
        valueFrom:
          secretKeyRef:
            name: $(params.GH_TOKEN_SECRET_NAME)
            key: token
      - name: HOME
        value: /notroot
      script: |
        #!/bin/sh
        git config --global --add safe.directory "$PARAM_WORKSPACE_SOURCE_PATH"
        git fetch --tags
        if [ ! -f CHANGELOG.md ]; then
          change init
        fi
        change auth --token "$GH_TOKEN"
        change
        change tag -p
        change post
        sed -n "s|^\[Unreleased\]:.*/\(.*\)\.\.\.HEAD$|\1|p" CHANGELOG.md > VERSION
      securityContext:
        runAsUser: 10000
    - name: push
      workingDir: $(workspaces.source.path)
      image: $(params.BUILDER_IMAGE)
      script: |
        #!/bin/sh
        /kaniko/executor --cache=true --cache-dir=/kaniko/cache --cache-repo="$(params.imageurl)/cache" --dockerfile=$(params.DOCKERFILE) --context=$(workspaces.source.path)/$(params.CONTEXT) --destination="$(params.IMAGE):$$(cat VERSION)" --digest-file=$(results.IMAGE_DIGEST.path)
    - name: write-url
      image: docker.io/library/bash:5.1.4@sha256:c523c636b722339f41b6a431b44588ab2f762c5de5ec3bd7964420ff982fb1d9
      script: |
        set -e
        image="$(params.IMAGE)"
        echo -n "$${image}" | tee "$(results.IMAGE_URL.path)"
    - name: shutdown-sidecar
      image: docker.io/library/bash:5.1.4@sha256:c523c636b722339f41b6a431b44588ab2f762c5de5ec3bd7964420ff982fb1d9
      script: |
        #!/bin/sh
        set -eu

        i=$(cat "sidecar-check-counter")
        if [[ $i -lt 5 ]]; then
          echo "QUITTING SIDECAR"
          wget -qO- -o /dev/null --post-data "" http://localhost:15020/quitquitquit > /dev/null
          echo "SIDECAR SHUTDOWN COMMAND ISSUED"
        fi

        exit 0
