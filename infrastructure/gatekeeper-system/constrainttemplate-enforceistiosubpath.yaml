apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: enforceistiosubpath
  namespace: gatekeeper-system
spec:
  crd:
    spec:
      names:
        kind: EnforceIstioSubPath
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            subPath:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredlabels

        has_prefix(match, pattern) = true {
          match.uri.prefix
          regex.match(pattern, match.uri.prefix)
        }

        has_exact(match, pattern) = true {
          match.uri.exact
          regex.match(pattern, match.uri.exact)
        }

        has_regex(match, pattern) = true {
          match.uri.regex
          regex.match(pattern, match.uri.regex)
        }

        violation[{"msg": msg, "details": {"non_compliant_routes": non_compliant_routes}}] {
          match := input.review.object.spec.http[_]
          non_compliant_routes := [route.name | route := input.review.object.spec.http[_]
                                                not route.match
                                                route.name]
          count(non_compliant_routes) > 0
          msg := sprintf("all tenant virtual service http routes must include a match field, routes that need to be fixed are: %v", [non_compliant_routes])
        }

        violation[{"msg": msg, "details": {"non_compliant_routes": non_compliant_routes}}] {
          match := input.review.object.spec.http[_]
          non_compliant_routes := [route.name | route := input.review.object.spec.http[_]
                                                route.match
                                                count(route.match) == 0
                                                route.name]
          count(non_compliant_routes) > 0
          msg := sprintf("the match field of all tenant virtual service http routes must include at least one match object, routes that need to be fixed are: %v", [non_compliant_routes])
        }

        violation[{"msg": msg, "details": {"non_compliant_matches": non_compliant_matches}}] {
          non_compliant_matches := [match | match := input.review.object.spec.http[_].match[_]
                                            not has_prefix(match, sprintf("^%v.*$", [input.parameters.subPath]))
                                            not has_regex(match, sprintf("^\\\\^%v.*\\\\$$", [input.parameters.subPath]))
                                            not has_exact(match, sprintf("^%v.*$", [input.parameters.subPath]))]
          count(non_compliant_matches) > 0
          msg := sprintf("all match objects in a tenant virtualservice must include a uri.<prefix|exact|regex> field that begins with '/t/%v/' for prefix and exact and '^/t/%v/' for regex (a dollar sign '$' is also REQUIRED at the end of the regex pattern string), match objects that need to be fixed are: %v", [input.parameters.subPath, input.parameters.subPath, non_compliant_matches])
        }
