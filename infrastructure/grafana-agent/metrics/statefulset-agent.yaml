apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana-agent-metrics
spec:
  replicas: 6
  selector:
    matchLabels:
      name: grafana-agent-metrics
  serviceName: grafana-agent-metrics
  template:
    metadata:
      labels:
        name: grafana-agent-metrics
    spec:
      topologySpreadConstraints:
      - maxSkew: 1
        whenUnsatisfiable: DoNotSchedule
        minDomains: 3
        topologyKey: "topology.kubernetes.io/zone"
        labelSelector:
          matchLabels:
            name: grafana-agent-metrics
      - maxSkew: 1
        whenUnsatisfiable: DoNotSchedule
        minDomains: 1
        topologyKey: "kubernetes.io/hostname"
        labelSelector:
          matchLabels:
            name: grafana-agent-metrics
      containers:
      - args:
        - -config.file=/etc/agent/agent.yaml
        - -enable-features=integrations-next
        - -server.http.address=0.0.0.0:80
        command:
        - /bin/agent
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: 274295908850.dkr.ecr.eu-west-1.amazonaws.com/i/grafana/agent:v0.29.0
        imagePullPolicy: IfNotPresent
        name: grafana-agent
        ports:
        - containerPort: 80
          name: http-metrics
        volumeMounts:
        - mountPath: /var/lib/agent
          name: agent-wal
        - mountPath: /etc/agent
          name: grafana-agent
      serviceAccountName: grafana-agent-metrics
      volumes:
      - configMap:
          name: grafana-agent-metrics
        name: grafana-agent
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: agent-wal
      namespace: "${infranamespaceprefix}grafana-agent"
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
