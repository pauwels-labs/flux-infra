kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecr-credentials-sync
rules:
- apiGroups: [""]
  resources:
  - secrets
  verbs:
  - get
  - create
  - patch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecr-credentials-sync
subjects:
- kind: ServiceAccount
  name: ecr-credentials-sync
roleRef:
  kind: Role
  name: ecr-credentials-sync
  apiGroup: ""
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecr-credentials-sync
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-credentials-sync
spec:
  suspend: false
  schedule: 0 */6 * * *
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: ecr-credentials-sync
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
          restartPolicy: Never
          volumes:
          - name: aws
            emptyDir:
              medium: Memory
          - name: token
            emptyDir:
              medium: Memory
          containers:
          - image: 274295908850.dkr.ecr.eu-west-1.amazonaws.com/amazon/aws-cli:2.7.33
            name: get-token
            env:
            - name: APP_MODE
              value: ""
            - name: APP_OIDC_URL
              value: ""
            - name: APP_OIDC_CLIENTID
              value: ""
            - name: APP_OIDC_TENANT_NAME
              value: ""
            - name: APP_OIDC_USERNAME
              value: ""
            - name: APP_OIDC_PASSWORD
              value: ""
            - name: APP_OIDC_AWS_ROLE_NAME
              value: ""
            - name: APP_AWS_ACCOUNT_ID
              value: ""
            - name: APP_AWS_REGION
              value: ""
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              seccompProfile:
                type: RuntimeDefault
            imagePullPolicy: IfNotPresent
            volumeMounts:
            - mountPath: /token
              name: token
            - mountPath: /.aws
              name: aws
            command:
            - /bin/sh
            - -c
            - |-
              # Envs used for configuration:
              #
              # APP_MODE: <irsa|oidc>, indicates whether to auth with
              # IRSA or OIDC tokens
              #
              # APP_OIDC_URL: "", if using OIDC mode, the
              # OIDC-compliant discovery URL without the
              # /.well-known/openid-configuration component
              #
              # APP_OIDC_CLIENTID: "", if using OIDC mode, the OIDC
              # client to login with
              #
              # APP_OIDC_TENANT_NAME: "", if using OIDC mode, the OIDC
              # tenant to login under
              #
              # APP_OIDC_USERNAME: "", if using OIDC mode, the OIDC
              # username to login with
              #
              # APP_OIDC_PASSWORD: "", if using OIDC mode, the OIDC
              # password to login with
              #
              # APP_OIDC_AWS_ROLE_NAME: "", if using OIDC mode, the
              # AWS role to assume
              #
              # APP_AWS_ACCOUNT_ID: "", if using OIDC mode, the
              # AWS account the role is in
              #
              # APP_AWS_REGION: "", AWS region where the registry is
              # located

              #!/bin/sh
              i=0
              echo "WAITING FOR SIDECAR"

              until curl --silent -o /dev/null "http://localhost:15021/healthz/ready"; do
                i=$((i+1))
                if [[ $i -eq 5 ]]; then
                  break
                fi
                echo "WAITING FOR SIDECAR"
                sleep 3
              done
              if [[ $i -eq 5 ]]; then
                echo "SIDECAR UNAVAILABLE, RUNNING WITHOUT"
              else
                echo "SIDECAR AVAILABLE"
              fi

              command_return_code=1
              if [ "$APP_MODE" == "irsa" ]; then
                echo "IRSA mode selected"

                # Converts the IRSA mounted token into a docker token
                aws ecr get-login-password --region "$APP_AWS_REGION" > /token/ecr-token
                command_return_code=$(echo $?)
              elif [ "$APP_MODE" == "oidc" ]; then
                echo "OIDC mode selected"

                # Fetches the OIDC token URL from the OIDC discovery URL
                TOKEN_ENDPOINT=$(curl "$APP_OIDC_URL/.well-known/openid-configuration" | jq -r .token_endpoint)

                # Fetches an OIDC token using the direct access grant and username and
                # password provided from env
                OIDC_TOKEN=$(curl "$TOKEN_ENDPOINT" -H "Content-Type: application/x-www-form-urlencoded" --data-urlencode "grant_type=password" --data-urlencode "client_id=$APP_OIDC_CLIENTID" --data-urlencode "username=$APP_OIDC_USERNAME" --data-urlencode "password=$APP_OIDC_PASSWORD" | jq -r .access_token)

                # Exchanges the OIDC token for AWS credentials to an assumed role and sets
                # those credentials into three envs
                echo $(aws sts assume-role-with-web-identity --role-arn "arn:aws:iam::$APP_AWS_ACCOUNT_ID:role/$APP_OIDC_AWS_ROLE_NAME" --role-session-name "$APP_OIDC_TENANT_NAME" --web-identity-token "$OIDC_TOKEN" | jq -r '.Credentials.AccessKeyId, .Credentials.SecretAccessKey, .Credentials.SessionToken') | read ACCESS_KEY_ID SECRET_ACCESS_KEY SESSION_TOKEN

                # Sets the AWS credentials into the local AWS config
                aws configure set aws_access_key_id "$ACCESS_KEY_ID" --profile ecr
                aws configure set aws_secret_access_key "$SECRET_ACCESS_KEY" --profile ecr
                aws configure set aws_session_token "$SESSION_TOKEN" --profile ecr

                # Uses the AWS credentials to fetch a docker token
                aws ecr get-login-password --region "$APP_AWS_REGION" --profile "ecr" > /token/ecr-token
                command_return_code=$(echo $?)
              else
                echo "Current value of APP_MODE env: $APP_MODE"
                echo ""
                echo "The APP_MODE env must be set to either 'irsa' if authenticating with IAM roles for service accounts, or 'oidc' if authenticating with an IdP using a username and password"
                echo "Quitting without making any requests..."
                command_return_code=1
              fi
              exit $command_return_code
          - image: 274295908850.dkr.ecr.eu-west-1.amazonaws.com/fluxcd/flux-cli:v0.25.2
            name: create-secret
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              seccompProfile:
                type: RuntimeDefault
            imagePullPolicy: IfNotPresent
            env:
            - name: APP_SECRET_NAME
              value: ecr-credentials
            - name: APP_AWS_ACCOUNT_ID
              value: ""
            volumeMounts:
            - mountPath: /token
              name: token
            command:
            - /bin/sh
            - -c
            - |-
              #!/bin/sh
              i=0
              echo "WAITING FOR SIDECAR"
              until wget -qO- -o /dev/null "http://localhost:15021/healthz/ready"; do
                i=$((i+1))
                if [[ $i -eq 5 ]]; then
                  break
                fi
                echo "WAITING FOR SIDECAR"
                sleep 3
              done
              if [[ $i -eq 5 ]]; then
                echo "SIDECAR UNAVAILABLE, RUNNING WITHOUT"
              else
                echo "SIDECAR AVAILABLE"
              fi
              until [ $(stat -c '%s' /token/ecr-token) -gt 0 ]; do
                echo "WAITING FOR TOKEN"
                sleep 3
              done
              echo "TOKEN FOUND, CREATING SECRET"
              ECR_REGISTRY="$APP_AWS_ACCOUNT_ID.dkr.ecr.$APP_AWS_REGION.amazonaws.com"
              kubectl create secret docker-registry "$APP_SECRET_NAME" \
                --dry-run=client \
                --docker-server="$ECR_REGISTRY" \
                --docker-username="AWS" \
                --docker-password="$(cat /token/ecr-token)" \
                -o yaml | kubectl apply -f -
              command_return_code=$(echo $?)
              if [[ $i -lt 5 ]]; then
                echo "QUITTING SIDECAR"
                wget -qO- -o /dev/null --post-data "" http://localhost:15020/quitquitquit > /dev/null
                echo "SIDECAR SHUTDOWN COMMAND ISSUED"
              fi
              exit $command_return_code
