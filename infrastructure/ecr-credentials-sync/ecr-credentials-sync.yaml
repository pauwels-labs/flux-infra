kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecr-credentials-sync
  namespace: flux-system
rules:
- apiGroups: [""]
  resources:
  - secrets
  verbs:
  - get
  - create
  - patch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecr-credentials-sync
  namespace: flux-system
subjects:
- kind: ServiceAccount
  name: ecr-credentials-sync
roleRef:
  kind: Role
  name: ecr-credentials-sync
  apiGroup: ""
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecr-credentials-sync
  namespace: flux-system
  annotations:
    eks.amazonaws.com/role-arn: ${ecriamrolearn}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-credentials-sync
  namespace: flux-system
spec:
  suspend: false
  schedule: 0 */6 * * *
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: ecr-credentials-sync
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
          restartPolicy: Never
          volumes:
          - name: aws
            emptyDir:
              medium: Memory
          - name: token
            emptyDir:
              medium: Memory
          initContainers:
          - image: 274295908850.dkr.ecr.eu-west-1.amazonaws.com/amazon/aws-cli:2.7.33
            name: get-token
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              seccompProfile:
                type: RuntimeDefault
            imagePullPolicy: IfNotPresent
            volumeMounts:
            - mountPath: /token
              name: token
            - mountPath: /.aws
              name: aws
            command:
            - /bin/sh
            - -ce
            - aws ecr get-login-password --region ${ecrregion} > /token/ecr-token
          containers:
          - image: 274295908850.dkr.ecr.eu-west-1.amazonaws.com/fluxcd/flux-cli:v0.25.2
            name: create-secret
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              seccompProfile:
                type: RuntimeDefault
            imagePullPolicy: IfNotPresent
            env:
            - name: SECRET_NAME
              value: ecr-credentials
            - name: ECR_REGISTRY
              value: ${ecraccountid}.dkr.ecr.${ecrregion}.amazonaws.com
            volumeMounts:
            - mountPath: /token
              name: token
            command:
            - /bin/sh
            - -ce
            - |-
              i = 0
              until wget -qO- -o /dev/null "http://localhost:15021/healthz/ready"; do
                echo "WAITING FOR SIDECAR";
                sleep 3;
                i = $((i+1))
                if [[ $i -eq 5]]; then
                  break
                fi
              done
              echo "SIDECAR AVAILABLE";
              kubectl create secret docker-registry $SECRET_NAME \
                --dry-run=client \
                --docker-server="$ECR_REGISTRY" \
                --docker-username=AWS \
                --docker-password="$(cat /token/ecr-token)" \
                -o yaml | kubectl apply -f -
              command_return_code=$(echo $?);
              echo "QUITTING SIDECAR";
              wget -qO- -o /dev/null --post-data "" http://localhost:15020/quitquitquit > /dev/null;
              echo "SIDECAR SHUTDOWN COMMAND ISSUED";
              exit $command_return_code;
